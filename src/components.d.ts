/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';
import '@stencil/router';

import {
  EventEmitter,
} from '@stencil/core';
import {
  IMenuEntry,
  ITopic,
} from './helpers/interfaces';
import {
  RouterHistory,
} from '@stencil/router';

declare global {

  namespace StencilComponents {
    interface MyApp {

    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LazyImg {
      'alt': string;
      'src': string;
      'width': number;
    }
  }

  interface HTMLLazyImgElement extends StencilComponents.LazyImg, HTMLStencilElement {}

  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-img': JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
      'src'?: string;
      'width'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DevNavbar {
      'color': string;
      'heading': string;
    }
  }

  interface HTMLDevNavbarElement extends StencilComponents.DevNavbar, HTMLStencilElement {}

  var HTMLDevNavbarElement: {
    prototype: HTMLDevNavbarElement;
    new (): HTMLDevNavbarElement;
  };
  interface HTMLElementTagNameMap {
    'dev-navbar': HTMLDevNavbarElement;
  }
  interface ElementTagNameMap {
    'dev-navbar': HTMLDevNavbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dev-navbar': JSXElements.DevNavbarAttributes;
    }
  }
  namespace JSXElements {
    export interface DevNavbarAttributes extends HTMLAttributes {
      'color'?: string;
      'heading'?: string;
      'onMenuClicked'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DevSearchBar {
      'heading': string;
      'value': string;
    }
  }

  interface HTMLDevSearchBarElement extends StencilComponents.DevSearchBar, HTMLStencilElement {}

  var HTMLDevSearchBarElement: {
    prototype: HTMLDevSearchBarElement;
    new (): HTMLDevSearchBarElement;
  };
  interface HTMLElementTagNameMap {
    'dev-search-bar': HTMLDevSearchBarElement;
  }
  interface ElementTagNameMap {
    'dev-search-bar': HTMLDevSearchBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dev-search-bar': JSXElements.DevSearchBarAttributes;
    }
  }
  namespace JSXElements {
    export interface DevSearchBarAttributes extends HTMLAttributes {
      'heading'?: string;
      'onMenuClicked'?: (event: CustomEvent<boolean>) => void;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DevSideMenu {
      'menuEntries': IMenuEntry[];
    }
  }

  interface HTMLDevSideMenuElement extends StencilComponents.DevSideMenu, HTMLStencilElement {}

  var HTMLDevSideMenuElement: {
    prototype: HTMLDevSideMenuElement;
    new (): HTMLDevSideMenuElement;
  };
  interface HTMLElementTagNameMap {
    'dev-side-menu': HTMLDevSideMenuElement;
  }
  interface ElementTagNameMap {
    'dev-side-menu': HTMLDevSideMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dev-side-menu': JSXElements.DevSideMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface DevSideMenuAttributes extends HTMLAttributes {
      'menuEntries'?: IMenuEntry[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TopicCard {
      'topic': ITopic;
    }
  }

  interface HTMLTopicCardElement extends StencilComponents.TopicCard, HTMLStencilElement {}

  var HTMLTopicCardElement: {
    prototype: HTMLTopicCardElement;
    new (): HTMLTopicCardElement;
  };
  interface HTMLElementTagNameMap {
    'topic-card': HTMLTopicCardElement;
  }
  interface ElementTagNameMap {
    'topic-card': HTMLTopicCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'topic-card': JSXElements.TopicCardAttributes;
    }
  }
  namespace JSXElements {
    export interface TopicCardAttributes extends HTMLAttributes {
      'onCardClicked'?: (event: CustomEvent<ITopic>) => void;
      'topic'?: ITopic;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHome {
      'history': RouterHistory;
    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppProfile {
      'name': string;
    }
  }

  interface HTMLAppProfileElement extends StencilComponents.AppProfile, HTMLStencilElement {}

  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
